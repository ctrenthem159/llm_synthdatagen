[tool.poetry]
name = "project-name"
version = "0.1.0"
description = "AI/ML project with Gradio and Streamlit"
authors = ["Your Name <you@example.com>"]
readme = "README.md"
license = "MIT"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.14"
# Web frameworks for AI/ML demos
gradio = "^4.44.0"
streamlit = "^1.39.0"

# Core ML/AI libraries (uncomment as needed)
# numpy = "^2.0.0"
# pandas = "^2.2.0"
# scikit-learn = "^1.5.0"
# matplotlib = "^3.9.0"
# seaborn = "^0.13.0"

# Deep Learning (uncomment as needed)
# torch = "^2.4.0"
# tensorflow = "^2.17.0"
# transformers = "^4.44.0"

# LLM / API integrations (uncomment as needed)
# openai = "^1.43.0"
# anthropic = "^0.34.0"
# langchain = "^0.2.0"
# langchain-openai = "^0.1.0"

# Utilities
# python-dotenv = "^1.0.0"
# requests = "^2.32.0"
# pydantic = "^2.8.0"
# pillow = "^10.4.0"

[tool.poetry.group.dev.dependencies]
# Code formatting and linting
black = "^24.8.0"
isort = "^5.13.0"
ruff = "^0.6.0"

# Testing
pytest = "^8.3.0"
pytest-cov = "^5.0.0"
pytest-mock = "^3.14.0"

# Type checking
mypy = "^1.11.0"

# Development utilities
ipython = "^8.27.0"
ipykernel = "^6.29.0"

[tool.poetry.group.notebooks]
optional = true

[tool.poetry.group.notebooks.dependencies]
jupyter = "^1.1.0"
notebook = "^7.2.0"
jupyterlab = "^4.2.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# ============================================================================
# Tool Configurations
# ============================================================================

[tool.black]
line-length = 88
target-version = ['py314']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true

[tool.ruff]
line-length = 88
target-version = "py314"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports in __init__.py
"tests/*" = ["S101"]      # use of assert in tests

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
]
testpaths = ["tests"]
pythonpath = ["."]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]

[tool.mypy]
python_version = "3.14"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "gradio.*",
    "streamlit.*",
]
ignore_missing_imports = true